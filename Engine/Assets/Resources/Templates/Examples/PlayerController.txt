using System.Numerics;
using Engine.Components;
using Engine.ECS;
using Engine.Helper;
using Engine.Utilities;

public class PlayerMovement : Component
{
    public float MovementSpeed = 2f;
    public float RotationSpeed = 5f;

    private Vector3 _targetDirection;
    private Vector2 _cameraRotation;

    public override void OnRegister() =>
        // Register the component with the ScriptSystem.
        ScriptSystem.Register(this);

    public override void OnUpdate()
    {
        HandleMovement();
        HandleRotation();
        UpdateTransform();
    }

    private void HandleMovement()
    {
        var horizontalInput = Input.GetAxis().X;
        var verticalInput = Input.GetAxis().Y;

        _targetDirection = Entity.Transform.Right * horizontalInput +
                           Entity.Transform.Forward * verticalInput;
        _targetDirection.Y = 0;
        _targetDirection = Vector3.Normalize(_targetDirection) * MovementSpeed;
    }

    private void HandleRotation()
    {
        if (!Input.GetButton(MouseButton.Right))
            return;

        var mouseInput = Input.GetMouseAxis();
        _cameraRotation.Y -= mouseInput.X * RotationSpeed * Time.DeltaF;
        _cameraRotation.X -= mouseInput.Y * RotationSpeed * Time.DeltaF;
        _cameraRotation.X = Math.Clamp(_cameraRotation.X, -89f, 89f);
    }

    private void UpdateTransform()
    {
        if (!_targetDirection.IsNaN())
            Entity.Transform.LocalPosition += _targetDirection * Time.DeltaF;

        if (!_cameraRotation.IsNaN())
        {
            Entity.Transform.EulerAngles = Vector3.UnitY * _cameraRotation.Y;
            Camera.Main.Entity.Transform.EulerAngles = Vector3.UnitX * _cameraRotation.X;
        }
    }
}
