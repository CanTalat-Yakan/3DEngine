using System.Collections;
using System.Numerics;
using System;
using Editor.Controller;
using Engine.Components;
using Engine.ECS;
using Engine.Editor;
using Engine.Helper;
using Engine.Utilities;

public class PlayerMovement : Component
{
    public float MovementSpeed = 2;
    public float RotationSpeed = 5;

    private Vector3 _targetDirection;
    private Vector2 _cameraRotataion;

    public override void OnRegister() =>
        // Register the component with the ScriptSystem.
        ScriptSystem.Register(this);

    public override void OnUpdate()
    {
        // Compute the target direction and the camera rotation.
        Movement();
        Rotation();

        // Check if the target direction is not NaN.
        if (!_targetDirection.IsNaN())
            // Add the target direction to the entity's position.
            Entity.Transform.LocalPosition += _targetDirection;
        // Add the horizontal camera rotation to the entity's rotation.
        Entity.Transform.EulerAngles = Vector3.UnitY * _cameraRotataion.Y;

        // Limit the camera's vertical rotation between -89 and 89 degrees.
        _cameraRotataion.X = Math.Clamp(_cameraRotataion.X, -89, 89);
        // Add the vertical camera rotation to the main camera.
        Camera.Main.Entity.Transform.EulerAngles = Vector3.UnitX * _cameraRotataion.X;
    }

    internal void Movement()
    {
        // Calculate the destination position based on the input axis values.
        Vector3 destination =
            Input.GetAxis().X * Entity.Transform.Right +
            Input.GetAxis().Y * Entity.Transform.Forward;

        // Return the normalized movement direction with a magnitude of MovementSpeed multiplied by the delta time.
        _targetDirection = Vector3.Normalize(destination) * MovementSpeed * (float)Time.Delta;
    }

    internal void Rotation()
    {
        if (!Input.GetButton(MouseButton.IsRightButtonPressed))
            return;

        // Create a new rotation based on the mouse X and Y axis inputs.
        Vector2 rotation = new(
            Input.GetMouseAxis().Y,
            Input.GetMouseAxis().X);

        // Update the entity's rotation based on the calculated rotation and rotation speed.
        _cameraRotataion -= rotation * (float)Time.Delta * RotationSpeed;
    }
}
